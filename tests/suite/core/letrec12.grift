(letrec ([one : ((Dyn -> Dyn) -> (Dyn -> Dyn))
          (lambda ([f : (Dyn -> Dyn)]) f)] 
         [const
          : ((-> Dyn) -> Dyn)
          #;((! (-> ⋆)) -> ı)
          (lambda (a) (a))])
  
  (let ([is0  : ((-> ((Dyn -> Dyn) -> (Dyn -> Dyn))) ->
                 ((Dyn -> Dyn) -> (Dyn -> Dyn)))
              #;((-> (! ((⋆ -> ⋆) -> (⋆ -> ⋆)))) ->
                 (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
              const])
    (is0 (lambda () one))
    ;; Step 1
    #;((casted const ((-> (! ((⋆ -> ⋆) -> (⋆ -> ⋆)))) ->
                      (? l ((⋆ -> ⋆) -> (⋆ -> ⋆)))))
       (lambda () one))
    ;; Step 2
    #; (cast (const (cast (lambda () one)
                          (-> (! ((⋆ -> ⋆) -> (⋆ -> ⋆))))))
             (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
    ;; Step 3
    #; (cast ((casted (lambda () one)
                      (-> (! ((⋆ -> ⋆) -> (⋆ -> ⋆))))))
             (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
    ;; Step 4
    #; (cast (cast ((lambda () one)) (! ((⋆ -> ⋆) -> (⋆ -> ⋆))))
             (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
    ;; Step 5
    #; (cast (cast one (! ((⋆ -> ⋆) -> (⋆ -> ⋆))))
             (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
    ;; Step 6
    #; (cast (casted one (! ((⋆ -> ⋆) -> (⋆ -> ⋆))))
             (? l ((⋆ -> ⋆) -> (⋆ -> ⋆))))
    ;; Step 7
    ;; one : ((⋆ -> ⋆) -> (⋆ -> ⋆))
    ))
