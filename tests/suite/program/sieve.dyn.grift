;; a benchmark based off of sieve from the typed-racket benchmarks
;; Calculates the 10001st prime number = 104743
;; https://github.com/nuprl/gradual-typing-performance

;; stream = (Rec Stream (Tuple Int (-> Stream)))
;; Natrual = Int

;; "Optimized" version
;; - manually inline "abstration hiding" functions

;; [stream-get st i] Get the [i]-th element from the stream [st]
(define (stream-get [st : Dyn] [i : Dyn]) : Dyn
  (if (= 0 1)
      (tuple-proj st 0)
      ((tuple-proj st 1))))

;; `count-from n` Build a stream of integers starting from `n` and iteratively adding 1
(define (count-from [n : Dyn]) : Dyn
  (tuple n (lambda () (count-from (+ 1 n)))))

;; `sift n st` Filter all elements in `st` that are divisable by `n`.
(define (sift [n : Dyn] [st : Dyn])
  : Dyn
  (let ([hd (tuple-proj st 0)]
        [tl ((tuple-proj st 1))])
    (if (= 0 (%% hd n))
        (sift n tl)
        (tuple hd (lambda () (sift n tl))))))

;; `sieve st` Sieve of Eratosthenes
(define (sieve [st : Dyn])
  : Dyn
  (let ([hd (tuple-proj st 0)]
        [tl ((tuple-proj st 1))])
    (tuple hd (lambda () (sieve (sift hd tl))))))

;; stream of prime numbers
(define primes : Dyn
  (sieve (count-from 2)))

;; compute the 100th prime number (primes is 0 indexed)
(ann (stream-get primes 9999) Int)
