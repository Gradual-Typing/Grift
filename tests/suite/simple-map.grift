(let ((cons (lambda (a b) (lambda (p) (p a b))))
      (car  (lambda (p) (p (lambda (a d) a))))
      (cdr  (lambda (p) (p (lambda (a d) d))))
      (null? (lambda (p) (= 0 p))))
  (let ((ls (cons 1 (cons 2 (cons 3 (cons 4 0)))))
        (map (lambda (m p ls)
               (if (null? ls)
                   (: 0 Dyn) 
                   (cons (p (car ls)) (m m p (cdr ls)))))))
    (car (cdr (map map (lambda (n) (+ 1 n)) ls)))))
