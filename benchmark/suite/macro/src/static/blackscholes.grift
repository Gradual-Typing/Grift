
(define inv-sqrt-2x-pi : Float 0.39894228040143270286)

(define (cummulative-normal-distribution [InputX : Float]) : Float
  (let ([sign : Bool (fl< InputX #i0.0)]
        [x-input : Float (if (fl< InputX #i0.0)
                             (fl* InputX #i-1.0)
                             InputX)])
    (let ([exp-values : Float (flexp (fl* #i-0.5 (fl* x-input x-input)))])
      (let ([n-prime-of-x : Float (fl* exp-values inv-sqrt-2x-pi)]
            [x-k2 : Float (fl/ #i1.0 (fl+ #i1.0 (fl* #i0.2316419 x-input)))])
        (let ([x-k2^2 : Float (fl* x-k2 x-k2)])
          (let ([x-k2^3 : Float (fl* x-k2^2 x-k2)])
            (let ([x-k2^4 : Float (fl* x-k2^3 x-k2)])
              (let ([x-k2^5 : Float (fl* x-k2^4 x-k2)])
                (let ([x1 : Float (fl* 0.319381530  x-k2)]
                      [x2 : Float (fl* -0.356563782 x-k2^2)]
                      [x3 : Float (fl* 1.781477937  x-k2^3)]
                      [x4 : Float (fl* -1.821255978 x-k2^4)]
                      [x5 : Float (fl* 1.330274429  x-k2^5)])
                  (let ([x : Float (fl+ x1 (fl+ x5 (fl+ x4 (fl+ x2 x3))))])
                    (let ([x : Float (fl- #i1.0 (fl* x n-prime-of-x))])
                      (if sign (fl- #i1.0 x) x))))))))))))

(define (black-scholes [spot : Float]
                       [strike : Float]
                       [rate : Float]
                       [volatility : Float]
                       [time : Float]
                       [option-type : Int]
                       [timet : Float])
  : Float
  (let ([log : Float (fllog (fl/ spot strike))]
        [pow : Float (fl* #i0.5 (fl* volatility volatility))]
        [den : Float (fl* volatility (flsqrt time))])
    (let ([d1 : Float (fl/ (fl+ log (fl* time (fl+ rate pow))) den)])
      (let ([d2 : Float (fl- d1 den)])
        (let ([n-of-d1 : Float (cummulative-normal-distribution d1)]
              [n-of-d2 : Float (cummulative-normal-distribution d2)]
              [fut-value : Float
               (fl* strike (flexp (fl* #i-1 (fl* rate time))))])
          (if (= option-type 0)
              (fl- (fl* spot n-of-d1) (fl* fut-value n-of-d2))
              (fl- (fl* fut-value (fl- #i1.0 n-of-d2))
                   (fl* spot (fl- #i1.0 n-of-d1)))))))))

(define (make-option [spot-price : Float]
                     [strike-price : Float]
                     [rfi-rate : Float]
                     [divr : Float]
                     [volatility : Float]
                     [time : Float]
                     [option-type : Char]
                     [divs : Float]
                     [DerivGem-value : Float])
  : (Tuple Float Float Float Float 
           Float Float Char Float Float)
  (tuple spot-price strike-price rfi-rate
         divr volatility time option-type
         divs DerivGem-value))

(define (read-option-type) : Char
  (let ([c : Char (read-char)])
    (if (= (char->int c) (char->int #\P))
        c
        (if (= (char->int c) (char->int #\C))
            c
            (if (= (char->int c) (char->int #\space))
                (read-char)
                (read-char))))));; raise error?

(define (read-option)
  : (Tuple Float Float Float Float 
           Float Float Char Float Float)
  (let ([spot-price : Float (read-float)])
    (let ([strike-price : Float (read-float)])
      (let ([rfi-rate : Float (read-float)])
        (let ([dividend-rate : Float (read-float)])
          (let ([volatility : Float (read-float)])
            (let ([maturity-len : Float (read-float)])
              (let ([option-type : Char (read-option-type)])
                (let ([divs : Float (read-float)])
                  (let ([DerivGem-value : Float (read-float)])
                    (make-option spot-price strike-price rfi-rate
                                 dividend-rate volatility maturity-len
                                 option-type divs DerivGem-value)))))))))))

(define number-of-runs : Int 100)

(define (run-benchmark) : Unit
  (let ([number-of-options : Int (read-int)]
        [fake-data
         : (Tuple Float Float Float Float 
                  Float Float Char Float Float)
         (tuple #i0 #i0 #i0 #i0 #i0 #i0 #\P #i0 #i0)])
    (let ([data
           : (Vect (Tuple Float Float Float Float Float Float Char Float Float))
           (vector number-of-options fake-data)]
          [spots : (Vect Float) (vector number-of-options #i0)]
          [strikes : (Vect Float) (vector number-of-options #i0)]
          [rates : (Vect Float) (vector number-of-options #i0)]
          [volatilities : (Vect Float) (vector number-of-options #i0)]
          [otypes : (Vect Int) (vector number-of-options 0)]
          [otimes : (Vect Float) (vector number-of-options #i0)])
      (begin 
        (repeat (i 0 number-of-options) (_ : Unit ()) 
         (vector-set! data i (read-option)))
        (repeat (i 0 number-of-options) (_ : Unit ())
         (let ([od : (Tuple Float Float Float Float 
                            Float Float Char Float Float)
                   (vector-ref data i)])
           (begin
             (vector-set! otypes i
                          (if (= (char->int (tuple-proj od 6))
                                 (char->int #\P))
                              1
                              0))
             (vector-set! spots i (tuple-proj od 0))
             (vector-set! strikes i (tuple-proj od 1))
             (vector-set! rates i (tuple-proj od 2))
             (vector-set! volatilities i (tuple-proj od 4))
             (vector-set! otimes i (tuple-proj od 5)))))
        (let ([prices : (Vect Float) (vector number-of-options #i0)])
          (begin
            (repeat (j 0 number-of-runs) (_ : Unit ())
              (repeat (i 0 number-of-options) (_ : Unit ())
                (vector-set! prices i
                             (black-scholes (vector-ref spots i)
                                            (vector-ref strikes i)
                                            (vector-ref rates i)
                                            (vector-ref volatilities i)
                                            (vector-ref otimes i)
                                            (vector-ref otypes i)
                                            #i0))))
            (repeat (i 0 number-of-options) (_ : Unit ())
             (begin (print-float (vector-ref prices i) 18)
                    (display-char #\newline)))))))))

(time (run-benchmark))
