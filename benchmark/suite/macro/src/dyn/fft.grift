(define n : Dyn (read-int))
(define data : Dyn (vector n (: #i0.0 Dyn)))
(define pi*2 : Dyn #i6.28318530717959) ; to compute the inverse, negate this value

(define (loop1 [i : Dyn] [j : Dyn]) : Dyn
  (if (< i n)
      (begin
        (if (< i j)
            (begin
              (let ([temp : Dyn (vector-ref data i)])
                (begin
                  (vector-set! data i (vector-ref data j))
                  (vector-set! data j temp)))
              (let ([temp : Dyn (vector-ref data (+ i 1))])
                (begin
                  (vector-set! data (+ i 1) (vector-ref data (+ j 1)))
                  (vector-set! data (+ j 1) temp))))
            ())
        (loop2 (quotient n 2) j i))
      ()))

(define (loop2 [m : Dyn] [j : Dyn] [i : Dyn]) : Dyn
  (if (and (>= m 2) (>= j m))
      (loop2 (quotient m 2) (- j m) i)
      (loop1 (+ i 2) (+ j m))))

(define (loop3 [mmax : Dyn]) : Dyn
  (if (< mmax n)
      (let ([theta : Dyn (fl/ pi*2 (int->float mmax))])
        (let ([wpr : Dyn (let ([x : Dyn (flsin (fl* #i0.5 theta))])
                             (fl* #i-2.0 (fl* x x)))]
              [wpi : Dyn (flsin theta)])
          (begin
            (loop4 #i1.0 #i0.0 0 mmax wpr wpi)
            (loop3 (* mmax 2)))))
      ()))

(define (loop4 [wr : Dyn]
               [wi : Dyn]
               [m : Dyn]
               [mmax : Dyn]
               [wpr : Dyn]
               [wpi : Dyn]) : Dyn
  (if (< m mmax)
      (loop5 m mmax wr wi m wpr wpi)
      ()))

(define (loop5 [i : Dyn]
               [mmax : Dyn]
               [wr : Dyn]
               [wi : Dyn]
               [m : Dyn]
               [wpr : Dyn]
               [wpi : Dyn]) : Dyn
  (if (< i n)
      (let ([j : Dyn (+ i mmax)])
        (let ([tempr : Dyn
                     (fl-
                      (fl* wr (vector-ref data j))
                      (fl* wi (vector-ref data (+ j 1))))]
              [tempi : Dyn
                     (fl+
                      (fl* wr (vector-ref data (+ j 1)))
                      (fl* wi (vector-ref data j)))])
          (begin
            (vector-set! data j
                         (fl- (vector-ref data i) tempr))
            (vector-set! data (+ j 1)
                         (fl- (vector-ref data (+ i 1)) tempi))
            (vector-set! data i
                         (fl+ (vector-ref data i) tempr))
            (vector-set! data (+ i 1)
                         (fl+ (vector-ref data (+ i 1)) tempi))
            (loop5 (+ j mmax) mmax wr wi m wpr wpi))))
      (loop4 (fl+ (fl- (fl* wr wpr) (fl* wi wpi)) wr)
             (fl+ (fl+ (fl* wi wpr) (fl* wr wpi)) wi)
             (+ m 2)
             mmax wpr wpi)))

(begin
  (loop1 0 0) ;; bit-reversal section
  (loop3 2)   ;; Danielson-Lanczos section
  (: (vector-ref data 0) Float))
