(define (create [l1 : Dyn] [l2 : Dyn]) : Dyn
  (let ([x : Dyn
           (vector (* l1 l2) (: 0 Dyn))])
    (begin
      (repeat (i 0 l1) (_ ())
        (repeat (j 0 l2) (_ ())
          (vector-set! x (+ (* l2 i) j) (+ j i))))
      x)))

(define (mult [x : Dyn]
              [x1 : Dyn] [x2 : Dyn]
              [y : Dyn]
              [y1 : Dyn] [y2 : Dyn]) : Dyn
              (let ([r : Dyn (vector (* y2 x1) (: 0 Dyn))])
                (begin
                  (repeat (i 0 x1) (_ ())
                    (repeat (j 0 y2) (_ ())
                      (repeat (k 0 y1) (_ ())
                        (vector-set! r (+ (* i y2) j)
                                     (+ (vector-ref r (+ (* i y2) j))
                                        (* (vector-ref x (+ (* i x2) k))
                                           (vector-ref y (+ (* k y2) j))))))))
                  r)))

(let ([size : Dyn (read-int)])
  (let ([ar : Dyn size]
	[ac : Dyn size]
	[br : Dyn size]
	[bc : Dyn size])
    (if (= ac br)
	(let ([a : Dyn (create ar ac)]
              [b : Dyn (create br bc)]
              [bx : (Ref Dyn) (box 0)])
          (time (vector-ref (mult a ar ac b br bc) (- (* ar bc) 1))))
	0)))
