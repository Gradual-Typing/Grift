(let ([a : (GVect Int) (gvector 100 1)])
  (begin
    (repeat (i 0 100)
    	    (gvector-set! a i (- 100 i)))
    (letrec ([sort : ((GVect Int) Int Int -> Int)
                   (lambda ([a : (GVect Int)] [p : Int] [r : Int]) : Int
                           (if (< p r)
                               (let ([q : Int (partition a p r)])
                                 (begin
                                   (sort a p (- q 1))
                                   (sort a (+ q 1) r)))
                               0))]
             [partition : ((GVect Int) Int Int -> Int)
                        (lambda ([a : (GVect Int)] [p : Int] [r : Int]) : Int
                                (let ([i : (GRef Int) (gbox (- p 1))]
                                      [x : Int (gvector-ref a r)])
                                  (begin
                                    (repeat (j p r)
                                            (if (<= (gvector-ref a j) x)
                                                (begin
                                                  (gbox-set! i (+ (gunbox i) 1))
                                                  (swap a (gunbox i) j))
                                                0))
                                    (swap a (+ (gunbox i) 1) r)
                                    (+ (gunbox i) 1))))]
             [swap : ((GVect Int) Int Int -> Int)
                   (lambda ([a : (GVect Int)] [i : Int] [j : Int]) : Int
                           (if (= i j)
                               0
                               (let ([t : Int (gvector-ref a i)])
                                 (begin
                                   (gvector-set! a i (gvector-ref a j))
                                   (gvector-set! a j t)
                                   0))))])
      (sort a 0 99))
    (gvector-ref a 99)))
