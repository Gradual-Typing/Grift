(define (sort [a : (Vect Int)] [p : Int] [r : Int]) : Unit
  (let ([ad : (Vect Dyn) a])
    (if (< p r)
        (let ([q : Int (partition ad p r)])
          (begin
            (sort ad p (- q 1))
            (sort ad (+ q 1) r)))
        ())))

(define (partition [a : (Vect Int)] [p : Int] [r : Int]) : Int
  (let ([i : (Ref Int) (box (- p 1))]
        [x : Int (vector-ref a r)])
    (begin
      (repeat (j p r) (_ ())
        (if (<= (vector-ref a j) x)
            (begin
              (box-set! i (+ (unbox i) 1))
              (swap a (unbox i) j))
            ()))
      (swap a (+ (unbox i) 1) r)
      (+ (unbox i) 1))))


(define (swap [a : (Vect Int)] [i : Int] [j : Int]) : Unit
  (if (= i j)
      ()
      (let ([t : Int (vector-ref a i)])
        (begin
          (vector-set! a i (vector-ref a j))
          (vector-set! a j t)))))

(let ([size : Int (read-int)])
  (let ([a : (Vect Int) (vector size 1)])
    (begin
      (repeat (i 0 size) (_ ())
        (vector-set! a i (read-int)))
      (sort a 0 (- size 1))
      (vector-ref a (- size 1)))))
