(define (create [l1 : Int] [l2 : Int]) : (Vect Int)
  (let ([x : (Vect Int)
           (vector (* l1 l2) 0)])
    (begin
      (repeat (i 0 l1) (_ : Unit ())
        (repeat (j 0 l2) (_ : Unit ())
          (vector-set! x (+ (* l2 i) j) (+ j i))))
      x)))

(define (mult [x : (Vect Int)]
              [x1 : Int] [x2 : Int]
              [y : (Vect Int)]
              [y1 : Int] [y2 : Int]) : (Vect Int)
              (let ([r : (Vect Int) (vector (* y2 x1) 0)])
                (begin
                  (repeat (i 0 x1) (_ : Unit ())
                    (repeat (j 0 y2) (_ : Unit ())
                      (repeat (k 0 y1) (_ : Unit ())
                        (vector-set! r (+ (* i y2) j)
                                     (+ (vector-ref r (+ (* i y2) j))
                                        (* (vector-ref x (+ (* i x2) k))
                                           (vector-ref y (+ (* k y2) j))))))))
                  r)))

(define (run-benchmark)
  : Unit
  (let ([size : Int (read-int)])
    (let ([ar : Int size]
          [ac : Int size]
          [br : Int size]
          [bc : Int size])
      (let ([a : (Vect Int) (create ar ac)]
            [b : (Vect Int) (create br bc)])
        (begin
          (print-int (vector-ref (mult a ar ac b br bc) (- (* ar bc) 1)))
          (display-char #\newline))))))

(time (run-benchmark))
