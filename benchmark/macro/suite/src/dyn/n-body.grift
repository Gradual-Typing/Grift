(define pi : Dyn #i3.141592653589793)
(define days-per-year : Dyn #i365.24)
(define solar-mass : Dyn (fl* (fl* #i4 pi) pi))
(define dt : Dyn 0.01)

(define (make-body [x : Dyn] [y : Dyn] [z : Dyn]
                   [vx : Dyn] [vy : Dyn] [vz : Dyn]
                   [mass : Dyn]) : Dyn
  (let ([v : Dyn (vector 7 (: #i0.0 Dyn))])
    (begin (vector-set! v 0 x)
           (vector-set! v 1 y)
           (vector-set! v 2 z)
           (vector-set! v 3 vx)
           (vector-set! v 4 vy)
           (vector-set! v 5 vz)
           (vector-set! v 6 mass)
           v)))

(define (set-body-x! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 0 v))

(define (body-x [b : Dyn]) : Dyn
  (vector-ref b 0))

(define (set-body-y! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 1 v))

(define (body-y [b : Dyn]) : Dyn
  (vector-ref b 1))

(define (set-body-z! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 2 v))

(define (body-z [b : Dyn]) : Dyn
  (vector-ref b 2))

(define (set-body-vx! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 3 v))

(define (body-vx [b : Dyn]) : Dyn
  (vector-ref b 3))

(define (set-body-vy! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 4 v))

(define (body-vy [b : Dyn]) : Dyn
  (vector-ref b 4))

(define (set-body-vz! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 5 v))

(define (body-vz [b : Dyn]) : Dyn
  (vector-ref b 5))

(define (set-body-mass! [b : Dyn] [v : Dyn]) : Dyn
  (vector-set! b 6 v))

(define (body-mass [b : Dyn]) : Dyn
  (vector-ref b 6))

(define *sun* : Dyn
  (make-body #i0.0 #i0.0 #i0.0 #i0.0 #i0.0 #i0.0 solar-mass))

(define *jupiter* : Dyn
  (make-body #i4.84143144246472090
             #i-1.16032004402742839
             #i-1.03622044471123109e-1
             (fl* #i1.66007664274403694e-3 days-per-year)
             (fl* #i7.69901118419740425e-3 days-per-year)
             (fl* #i-6.90460016972063023e-5 days-per-year)
             (fl* #i9.54791938424326609e-4 solar-mass)))

(define *saturn* : Dyn
  (make-body #i8.34336671824457987
             #i4.12479856412430479
             #i-4.03523417114321381e-1
             (fl* #i-2.76742510726862411e-3 days-per-year)
             (fl* #i4.99852801234917238e-3 days-per-year)
             (fl* #i2.30417297573763929e-5 days-per-year)
             (fl* #i2.85885980666130812e-4 solar-mass)))

(define *uranus* : Dyn
  (make-body #i1.28943695621391310e1
             #i-1.51111514016986312e1
             #i-2.23307578892655734e-1
             (fl* #i2.96460137564761618e-03 days-per-year)
             (fl* #i2.37847173959480950e-03 days-per-year)
             (fl* #i-2.96589568540237556e-05 days-per-year)
             (fl* #i4.36624404335156298e-05 solar-mass)))

(define *neptune* : Dyn
  (make-body #i1.53796971148509165e+01
             #i-2.59193146099879641e+01
             #i1.79258772950371181e-01
             (fl* #i2.68067772490389322e-03 days-per-year)
             (fl* #i1.62824170038242295e-03 days-per-year)
             (fl* #i-9.51592254519715870e-05 days-per-year)
             (fl* #i5.15138902046611451e-05 solar-mass)))

(define *system* : Dyn
  (let ([v : Dyn (vector 5 (: (vector 0 (: #i0.0 Dyn)) Dyn))])
   (begin (vector-set! v 0 *sun*)
     	  (vector-set! v 1 *jupiter*)
	  (vector-set! v 2 *saturn*)
	  (vector-set! v 3 *uranus*)
	  (vector-set! v 4 *neptune*)
	  v)))

(define *system-size* : Dyn 5)

;; -------------------------------
(define (offset-momentum) : Dyn
  (offset-momentum-loop 0 #i0.0 #i0.0 #i0.0))

(define (offset-momentum-loop [i1 : Dyn] [px : Dyn]
                              [py : Dyn] [pz : Dyn]) : Dyn
  (if (= i1 *system-size*)
    (begin
      (vector-set! (vector-ref *system* 0) 3
		    (fl/ (fl- #i0.0 px) solar-mass))
      (vector-set! (vector-ref *system* 0) 4
		    (fl/ (fl- #i0.0 py) solar-mass))
      (vector-set! (vector-ref *system* 0) 5
		    (fl/ (fl- #i0.0 pz) solar-mass)))
    (let ([j : Dyn (vector-ref *system* i1)])
      (offset-momentum-loop
       (+ i1 1)
       (fl+ px (fl* (vector-ref j 3) (vector-ref j 6)))
       (fl+ py (fl* (vector-ref j 4) (vector-ref j 6)))
       (fl+ pz (fl* (vector-ref j 5) (vector-ref j 6)))))))
				 



;; -------------------------------
(define (energy) : Dyn
  (energy-loop-o 0 #i0.0))

(define (energy-loop-o [o : Dyn] [e : Dyn])
  : Dyn
  (if (= o *system-size*)
      e
      (let([o1 : Dyn (vector-ref *system* o)])
        (let ([sqs : Dyn (fl+ (fl+ (fl* (vector-ref o1 3) (vector-ref o1 3))
                                     (fl* (vector-ref o1 4) (vector-ref o1 4)))
                                (fl* (vector-ref o1 5) (vector-ref o1 5)))])
          (let ([e : Dyn (fl+ e (fl* (fl* 0.5 (vector-ref o1 6)) sqs))])
            (energy-loop-i o o1 (+ o 1) e))))))


(define (energy-loop-i [o : Dyn] [o1 : Dyn] [i : Dyn]  [e : Dyn])
  : Dyn
  (if (= i *system-size*)
      (energy-loop-o (+ o 1) e)
      (let ([i1 : Dyn (vector-ref *system* i)])
        (let ([dx : Dyn (fl- (vector-ref o1 0) (vector-ref i1 0))]
              [dy : Dyn (fl- (vector-ref o1 1) (vector-ref i1 1))]
              [dz : Dyn (fl- (vector-ref o1 2) (vector-ref i1 2))])
          (let ([dist : Dyn (flsqrt (fl+ (fl+ (fl* dx dx) (fl* dy dy))
                                           (fl* dz dz)))])
            (let ([e : Dyn (fl- e (fl/ (fl* (vector-ref o1 6)
                                              (vector-ref i1 6))
                                         dist))])
              (energy-loop-i o o1 (+ i 1) e)))))))
;; ;; -------------------------------


(define (advance) : Dyn
  (advance-loop-o 0))

(define (advance-loop-o [o : Dyn]) : Dyn
  (if (= o *system-size*)
      ()
      (let ([o1 : Dyn (vector-ref *system* o)])
	(begin
	  (advance-loop-i (+ o 1)
                          (vector-ref o1 3)
                          (vector-ref o1 4)
                          (vector-ref o1 5)
                          o1)
	  (advance-loop-o (+ o 1))))))

(define (advance-loop-i [i3 : Dyn] [vx : Dyn]
                        [vy : Dyn] [vz : Dyn]
                        [o1 : Dyn])
  : Dyn
  (if (< i3 *system-size*)
      (let ([i1 : Dyn (vector-ref *system* i3)])
	(let ([dx : Dyn (fl- (vector-ref o1 0) (vector-ref i1 0))]
	      [dy : Dyn (fl- (vector-ref o1 1) (vector-ref i1 1))]
	      [dz : Dyn (fl- (vector-ref o1 2) (vector-ref i1 2))]) 
	  (let ([dist2 : Dyn (fl+ (fl+ (fl* dx dx) (fl* dy dy)) (fl* dz dz))])
	    (let ([mag : Dyn (fl/ dt (fl* dist2 (flsqrt dist2)))])
	      (let ([dxmag : Dyn (fl* dx mag)]
		    [dymag : Dyn (fl* dy mag)]
		    [dzmag : Dyn (fl* dz mag)]
		    [om : Dyn (vector-ref o1 6)]
		    [im : Dyn (vector-ref i1 6)])
		(begin
		  (vector-set! i1 3 (fl+ (vector-ref i1 3) (fl* dxmag om)))
		  (vector-set! i1 4 (fl+ (vector-ref i1 4) (fl* dymag om)))
		  (vector-set! i1 5 (fl+ (vector-ref i1 5) (fl* dzmag om)))
		  (advance-loop-i (+ i3 1)
				  (fl- vx (fl* dxmag im))
				  (fl- vy (fl* dymag im))
				  (fl- vz (fl* dzmag im))
                                  o1))))))) 
      (begin (vector-set! o1 3 vx)
	     (vector-set! o1 4 vy)
	     (vector-set! o1 5 vz)
	     (vector-set! o1 0 (fl+ (vector-ref o1 0) (fl* dt vx)))
	     (vector-set! o1 1 (fl+ (vector-ref o1 1) (fl* dt vy)))
	     (vector-set! o1 2 (fl+ (vector-ref o1 2) (fl* dt vz)))
	     ())))

(begin (offset-momentum) (: (energy) Float))
(begin (repeat (i 0 (read-int)) (a : Dyn ()) (advance))
       (: (energy) Float))

