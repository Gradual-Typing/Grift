(letrec ([create : (Int Int -> (GVect (GVect Int)))
                         (lambda ([l1 : Int] [l2 : Int]) : (GVect (GVect Int))
                           (let ([x : (GVect (GVect Int))
                                    (gvector l1 (gvector l2 0))])
                             (begin
                               (repeat (i 0 l1) (_ ())
                                       (let ([xi : (GVect Int) (gvector l2 0)])
                                         (begin
                                           (repeat (j 0 l2) (_ ())
                                                   (gvector-set! xi j (+ j i)))
                                           (gvector-set! x i xi))))
                               x)))]
                 [mult : ((GVect (GVect Int)) Int (GVect (GVect Int)) Int Int -> (GVect (GVect Int)))
                       (lambda ([x : (GVect (GVect Int))]
                                [x1 : Int]
                                [y : (GVect (GVect Int))]
                                [y1 : Int] [y2 : Int]) : (GVect (GVect Int))
                         (let ([r : (GVect (GVect Int))
			        (gvector x1 (gvector y2 0))])
                           (begin
                             (repeat (i 0 x1) (_ ())
                                     (let ([ri : (GVect Int) (gvector y2 0)])
                                       (begin
                                         (repeat (j 0 y2) (_ ())
                                                 (repeat (k 0 y1) (_ ())
                                                         (gvector-set! ri j
                                                                       (+ (gvector-ref ri j)
                                                                          (* (gvector-ref (gvector-ref x i) k)
                                                                             (gvector-ref (gvector-ref y k) j))))))
                                         (gvector-set! r i ri))))
                             r)))])
 (let ([size : Int (read-int)])
  (let ([ar : Int size]
	[ac : Int size]
	[br : Int size]
	[bc : Int size])
    (let ([a : (GVect (GVect Int)) (create ar ac)]
	  [b : (GVect (GVect Int)) (create br bc)]
	  [bx : (GRef Int) (gbox 0)])
	    (begin
	      (gbox-set! bx (gvector-ref (gvector-ref (mult a ar b br bc) (- ar 1)) (- ac 1)))
	      (gunbox bx)))))
)

