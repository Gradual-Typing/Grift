(let ([size : Dyn (read-int)])
  (let ([ar : Dyn size]
	[ac : Dyn size]
	[br : Dyn size]
	[bc : Dyn size])
    (if (= ac br)
	(letrec ([create : (Dyn Dyn -> Dyn)
                         (lambda ([l1 : Dyn] [l2 : Dyn]) : Dyn
                           (let ([x : Dyn
                                    (gvector l1 (gvector l2 0))])
                             (begin
                               (repeat (i 0 l1) (_ ())
                                       (let ([xi : Dyn (gvector l2 0)])
                                         (begin
                                           (repeat (j 0 l2) (_ ())
                                                   (gvector-set! xi j (+ j i)))
                                           (gvector-set! x i xi))))
                               x)))]
                 [mult : (Dyn Dyn Dyn Dyn Dyn -> Dyn)
                       (lambda ([x : Dyn]
                                [x1 : Dyn]
                                [y : Dyn]
                                [y1 : Dyn] [y2 : Dyn]) : Dyn
                         (let ([r : Dyn (gvector ar (gvector bc 0))])
                           (begin
                             (repeat (i 0 x1) (_ ())
                                     (let ([ri : Dyn (gvector y2 0)])
                                       (begin
                                         (repeat (j 0 y2) (_ ())
                                                 (repeat (k 0 y1) (_ ())
                                                         (gvector-set! ri j
                                                                       (+ (gvector-ref ri j)
                                                                          (* (gvector-ref (gvector-ref x i) k)
                                                                             (gvector-ref (gvector-ref y k) j))))))
                                         (gvector-set! r i ri))))
                             r)))])
	  (let ([a : Dyn (create ar ac)]
		[b : Dyn (create br bc)]
		[bx : Dyn (gbox 0)])
	    (begin
	      (time (gbox-set! bx (gvector-ref (gvector-ref (mult a ar b br bc) (- ar 1)) (- ac 1))))
	      (gunbox bx))))
	0)))
